{% extends 'app.html.twig' %}

{% block description %}
    –ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –ï–•–≤–î–∞, –ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è 3400, –°–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω –î–µ–º—è–Ω—Å–∫ –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–±–æ—Ä–Ω–∏–∫.
    –ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–Ω–∏–∫–∞–º
{% endblock %}

{% block icon %}
    <link rel="icon" href="{{ absolute_url(asset('img/hymns/favicon.png')) }}" type="image/png">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="–°–±–æ—Ä–Ω–∏–∫–∏ –ì–∏–º–Ω–æ–≤">
    <meta property="og:url" content="{{ url('homepage') }}">
    <meta property="og:locale" content="ru">
    <meta property="og:title" content="–°–±–æ—Ä–Ω–∏–∫–∏ –ì–∏–º–Ω–æ–≤">
    <meta property="og:description"
          content="–ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –ï–•–≤–î–∞, –ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è 3400, –°–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω –î–µ–º—è–Ω—Å–∫ –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–±–æ—Ä–Ω–∏–∫. –ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–Ω–∏–∫–∞–º">
    <meta property="og:image" content="{{ absolute_url(asset('img/hymns/favicon.png')) }}">
    <meta property="og:image:secure_url" content="{{ absolute_url(asset('img/hymns/favicon.png')) }}">
    <meta property="og:image:width" content="400">
    <meta property="og:image:height" content="400">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:alt" content="–°–±–æ—Ä–Ω–∏–∫–∏ –ì–∏–º–Ω–æ–≤">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="{{ absolute_url(asset('img/hymns/favicon.png')) }}">
{% endblock %}

{% block title %}–ì–∏–º–Ω—ã{% endblock %}

{% block styles %}
    <link href="{{ asset('css/hymns/hymns.css?version=1.4') }}" rel="stylesheet">
    <script src="{{ asset('js/vendor/nosleep.js') }}"></script>

    {% if app.environment is same as('prod') %}
        <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    {% else %}
        <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    {% endif %}
{% endblock %}

{% block main %}
    <div id="app">
        <div class="container mt-5 mb-3">
            <form @submit.prevent="searchHymns" class="pt-5">
                <h1 class="h1">–°–±–æ—Ä–Ω–∏–∫–∏ –≥–∏–º–Ω–æ–≤</h1>
                <div class="form-check form-switch">
                    <input
                        v-model="noSleepCheck"
                        id="noSleepCheckbox"
                        class="form-check-input"
                        type="checkbox"
                        role="switch"
                    >
                    <label class="form-check-label" for="noSleepCheckbox">–í—ã–∫–ª—é—á–∞—Ç—å —ç–∫—Ä–∞–Ω</label>
                </div>
                <label class="mt-5 form-label" for="searchHymnsInput">–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–Ω–∏–∫–∞–º</label>
                <div class="input-group border border-secondary rounded-3">
                    <input
                        ref="searchInput"
                        v-model="searchString"
                        id="searchHymnsInput"
                        class="form-control border-0"
                        type="text"
                        aria-label="Search"
                        aria-describedby="searchHymnsLabel"
                        placeholder="üîé –ù–æ–º–µ—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç"
                        autocomplete="off"
                        spellcheck="true"
                        required
                    >
                    <button
                        @click="resetSearchForm"
                        class="btn-close btn"
                        style="height: auto; padding: 0 10px;"
                        type="reset"
                        aria-label="Reset form"
                    ></button>
                    <button class="btn btn-primary">–ù–∞–π—Ç–∏</button>
                </div>
                <div class="btn-group mt-1 rounded-3" role="group" aria-label="Group For Input">
                    <button @click="typeToSearchInput('—ó')" type="button" class="btn btn-outline-secondary">—ó</button>
                    <button @click="typeToSearchInput('—î')" type="button" class="btn btn-outline-secondary">—î</button>
                    <button @click="typeToSearchInput('—ñ')" type="button" class="btn btn-outline-secondary">—ñ</button>
                    <button @click="typeToSearchInput('\'')" type="button" class="btn btn-outline-secondary">'</button>
                </div>
            </form>
            <div v-if="showSearchResults" id="searchDiv" class="py-2">
                <p>
                    ${ searchResultsLabel }$
                </p>
                <div v-if="searchResults.length !== 0" id="searchResults" class="d-grid gap-2">
                    <div v-for="hymn in searchResults" @click="openHymn(hymn)"
                         class="m-0 p-0 cursor-pointer border-bottom">
                        <p class="m-0 small">${ hymn.book_title }$</p>
                        <p class="m-0 mb-1 fw-bold text-overflow-ellipsis">
                            <span v-html="hymn.number"></span>: ${ hymn.title }$‚Ä¶
                        </p>
                        <p
                            class="m-0 pb-1"
                            v-html="getVerseLyricsText(hymn.verses[0])"
                        ></p>
                    </div>
                </div>
            </div>
            <div id="booksCollection" class="mt-5 py-2 d-flex flex-wrap gap-2">
                <nav aria-label="Book Collection">
                    <button class="btn btn-success dropdown-toggle" type="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                        ${ selectedBook.title }$
                    </button>
                    <ul class="dropdown-menu overflow-auto border-4 border-success-subtle shadow-lg">
                        <li v-for="book in books" class="cursor-pointer">
                            <a
                                @click="selectBook(book)"
                                :class="{'dropdown-item': true, 'text-bg-success': book.book_id === selectedBook.book_id }"
                            >${ book.title }$</a>
                        </li>
                    </ul>
                </nav>
            </div>
            <nav class="user-select-none text-center fw-bold" aria-label="Page navigation">
                <ul class="pagination" style="--bs-pagination-font-size: 0.9rem">
                    <li :class="{ 'page-item': true, 'disabled': currentPage === 1 }">
                        <a @click.prevent="currentPage = currentPage - 1" class="page-link" href="#" aria-label="Prev">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    <li v-if="currentPage - 1 > 0" class="page-item">
                        <a @click.prevent="currentPage = currentPage - 1" class="page-link" href="#">
                            ${ currentPage - 1 }$
                        </a>
                    </li>
                    <li class="page-item active">
                        <a @click.prevent class="page-link" href="#">
                            ${ currentPage }$
                        </a>
                    </li>
                    <li v-if="currentPage + 1 < maxPage" class="page-item">
                        <a @click.prevent="currentPage = currentPage + 1" class="page-link" href="#">
                            ${ currentPage + 1 }$
                        </a>
                    </li>
                    <li v-if="currentPage + 2 < maxPage && currentPage === 1" class="page-item">
                        <a @click.prevent="currentPage = currentPage + 2" class="page-link" href="#">
                            ${ currentPage + 2 }$
                        </a>
                    </li>
                    <li v-if="currentPage + 2 < maxPage" class="page-item">
                        <a @click.prevent class="page-link" href="#">
                            ...
                        </a>
                    </li>
                    <li v-if="currentPage !== maxPage" class="page-item">
                        <a @click.prevent="currentPage = maxPage" class="page-link" href="#">
                            ${ maxPage }$
                        </a>
                    </li>
                    <li :class="{ 'page-item': true, 'disabled': currentPage === maxPage }">
                        <a @click.prevent="currentPage = currentPage + 1" class="page-link" href="#" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
            <div id="hymnsCollection" class="my-5 d-grid gap-2">
                <div v-if="hymns.length === 0" class="fs-5 mh-100" style="height: 100vh;">
                    ${ hymnCollectionLabel }$
                </div>

                <div v-for="hymn in hymns">
                    <p @click="openHymn(hymn)" class="m-0 fs-5 cursor-pointer">
                        <span class="fw-bold">${ hymn.number }$</span>
                        <span class="ms-3">${ hymn.title + '‚Ä¶' }$</span>
                    </p>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalWindow" tabindex="-1" aria-labelledby="modalWindowTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable modal-fullscreen-lg-down">
                <div class="modal-content">
                    <div class="modal-header">
                        <div>
                            <h1 id="modalWindowTitle" class="modal-title fs-5 fw-bold text-overflow-ellipsis">
                                ${ getHymnNumberAndTitle(openedHymn) }$
                            </h1>
                            <div class="d-flex align-items-center flex-wrap">
                                <div id="modalWindowSubtitle2" class="m-0 small pe-1">${ openedHymn.book_title }$</div>
                                <div id="modalWindowSubtitle" class="m-0 small">${ ':: ' + openedHymn.category }$</div>
                            </div>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body new-scrollbar">
                        <div class="mb-4 d-flex align-items-center justify-content-between">
                            <a
                                id="modalLinkForSendNotification"
                                class="link-secondary link-opacity-75"
                                :href="openedHymn.submitErrorLink"
                            >–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ</a>
                            <div class="btn-group btn-group-sm" role="group" aria-label="Font button group">
                                <button
                                    @click="changeOpenedHymnLyricsFontSize(-2)"
                                    class="btn btn-outline-secondary"
                                    title="–£–º–µ–Ω—å—à–∏—Ç—å —à—Ä–∏—Ñ—Ç"
                                >-Aa
                                </button>
                                <button
                                    @click="copyHymnText(openedHymn)"
                                    class="btn btn-outline-secondary"
                                    title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
                                >
                                    <svg class="bi">
                                        <use href="#clipboard"></use>
                                    </svg>
                                </button>
                                <button
                                    @click="changeOpenedHymnLyricsFontSize(2)"
                                    class="btn btn-outline-secondary"
                                    title="–£–≤–µ–ª–∏—á–∏—Ç—å —à—Ä–∏—Ñ—Ç"
                                >+Aa
                                </button>
                            </div>
                        </div>
                        <div :style="{ 'font-size': openedHymnLyricsFontSize + 'px' }">
                            <p
                                v-for="verse in openedHymn.verses"
                                v-html="getVerseLyricsHtml(verse)"
                                :class="{'mb-4': true, 'p-2 rounded border border-secondary': verse.is_chorus}"
                            ></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script type="module">
        const { createApp, ref, watch, useTemplateRef } = Vue

        createApp({
            delimiters: ['${', '}$'],
            setup () {
                const KEY_OF_MODAL_BODY_FONT_SIZE = 'modal_window_body_font_size'
                const SONGS_PER_PAGE = 100
                const DEBOUNCE_TIME = 1000
                const noSleep = new NoSleep()

                const currentPage = ref(1)
                const maxPage = ref(1)
                const noSleepCheck = ref(null)
                const searchString = ref('')
                const searchInput = useTemplateRef('searchInput')
                const lastSearch = ref('')
                const showSearchResults = ref(false)
                const searchResults = ref([])
                const searchResultsLabel = ref('')
                const selectedBook = ref({})
                const hymns = ref([])
                const hymnCollectionLabel = ref('–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶')
                const books = ref([])
                const openedHymn = ref({
                    book_title: '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶',
                    number: '–ó–∞–≥—Ä—É–∑–∫–∞',
                    title: '–ø–æ–¥–æ–∂–¥–∏—Ç–µ',
                    category: '',
                    verses: [],
                })
                const openedHymnLyricsFontSize = ref(Number(localStorage.getItem(KEY_OF_MODAL_BODY_FONT_SIZE)) || 18)

                function debounce (func, ms) {
                    let timeout
                    return function () {
                        clearTimeout(timeout)
                        timeout = setTimeout(() => func.apply(this, arguments), ms)
                    }
                }

                let debouncedSearch = debounce(searchHymns, DEBOUNCE_TIME)

                watch(noSleepCheck, (off) => {
                    if (off) {
                        noSleep.disable()
                    } else {
                        noSleep.enable()
                    }
                })

                watch(searchString, debouncedSearch)

                watch(currentPage, updateHymns)

                function showToastMessage (title, message) {
                    let toastDiv = document.querySelector('.toast')

                    toastDiv.querySelector('.toast-title').innerText = title
                    toastDiv.querySelector('.toast-body').innerText = message

                    let bsToast = new bootstrap.Toast(toastDiv)
                    bsToast.show()
                }

                async function getData (uri) {
                    let response = await fetch(uri)
                    let responseJson = await response.json()

                    if ( ! responseJson?.ok) {
                        console.log(uri, responseJson)
                        showToastMessage('Error', responseJson?.detail || 'Response with status ' + response.status)
                    }

                    return responseJson
                }

                async function updateBooks () {
                    let responseJson = await getData('/api/v1/books')

                    for (let bookId in responseJson.data) {
                        books.value.push(responseJson.data[bookId])
                    }
                }

                async function updateHymns () {
                    hymnCollectionLabel.value = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶'
                    let startNumber = currentPage.value * SONGS_PER_PAGE - SONGS_PER_PAGE
                    let endNumber = currentPage.value * SONGS_PER_PAGE

                    let responseJson = await getData(
                        '/api/v1/hymns/book/' + selectedBook.value.book_id + '/' + startNumber + '/' + endNumber,
                    )
                    hymns.value = responseJson.data

                    if (hymns.value.length === 0) {
                        hymnCollectionLabel.value = '–ù–∏—á–µ–≥–æ –Ω–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é'
                    }
                }

                function selectBook (book) {
                    if (selectedBook.value.book_id === book.book_id) {
                        return
                    }

                    selectedBook.value = book
                    currentPage.value = 1
                    maxPage.value = Math.ceil(Number((book.total_songs / SONGS_PER_PAGE).toFixed(2)))
                    updateHymns()
                }

                function typeToSearchInput (value) {
                    let searchStart = searchString.value.substring(0, searchInput.value.selectionStart)
                    let searchEnd = searchString.value.substring(searchInput.value.selectionEnd)
                    searchString.value = searchStart + value + searchEnd

                    searchInput.value.focus()
                }

                function resetSearchForm () {
                    lastSearch.value = ''
                    searchString.value = ''
                    showSearchResults.value = false
                    searchResults.value = []
                }

                function mark (string, word) {
                    if (word.length < 1) {
                        return string
                    }

                    return String(string).replace(new RegExp(word, 'gim'), '<mark>$&</mark>')
                }

                async function searchHymns () {
                    let search = searchString.value.trim()

                    if (search === '') {
                        resetSearchForm()

                        return
                    }

                    if (search === lastSearch.value) {
                        return
                    }

                    showSearchResults.value = true
                    searchResultsLabel.value = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶'
                    let responseJson = await getData('/api/v1/hymns/search/' + search)
                    let hymns = []

                    for (let hymn of responseJson.data) {
                        for (let word of search.split(' ')) {
                            hymn.number = mark(hymn.number, word)
                            hymn.verses[0].lyrics = mark(hymn.verses[0].lyrics, word)
                        }

                        hymns.push(hymn)
                    }

                    lastSearch.value = search
                    searchResults.value = hymns
                    searchResultsLabel.value = searchResults.value.length === 0
                        ? '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
                        : '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '
                }

                async function openHymn (hymn) {
                    let modalWindow = new bootstrap.Modal('#modalWindow')
                    modalWindow.show()

                    if (noSleepCheck.value !== true) {
                        noSleepCheck.value = false
                    }

                    let responseJson = await getData('/api/v1/hymns/' + hymn.hymn_id)
                    hymn = responseJson.data
                    hymn.submitErrorLink = 'mailto:vqcheslav.official@gmail.com'
                        + '?subject=–û—à–∏–±–∫–∞%20–≤%20—Ç–µ–∫—Å—Ç–µ%20–≥–∏–º–Ω–∞&body=–ù–æ–º–µ—Ä%20–≥–∏–º–Ω–∞%3A%20'
                        + getHymnNumberAndTitle(hymn)
                        + '%0A–°–±–æ—Ä–Ω–∏–∫%3A%20'
                        + hymn.book_title
                        + '%0A–ö—É–ø–ª–µ—Ç%3A%20%0A–û–ø–∏—Å–∞–Ω–∏–µ%3A%20%0A'

                    openedHymn.value = hymn
                }

                function getVerseLyricsHtml (verse) {
                    let lyrics = verse.is_chorus ? '<i>–ü—Ä–∏–ø–µ–≤:</i> <br>' : verse.position + '. '

                    return lyrics + verse.lyrics.replaceAll('\n', '<br>')
                }

                function getVerseLyricsText (verse) {
                    let lyrics = verse.is_chorus ? '–ü—Ä–∏–ø–µ–≤: \n' : verse.position + '. '

                    return lyrics + verse.lyrics
                }

                function changeOpenedHymnLyricsFontSize (change) {
                    if (
                        (change > 0 && openedHymnLyricsFontSize.value >= 36)
                        || (change < 0 && openedHymnLyricsFontSize.value <= 12)
                    ) {
                        return
                    }

                    openedHymnLyricsFontSize.value += change
                    localStorage.setItem(KEY_OF_MODAL_BODY_FONT_SIZE, openedHymnLyricsFontSize.value)
                }

                function getHymnNumberAndTitle (hymn) {
                    return hymn.number + ': ' + hymn.title + '‚Ä¶'
                }

                function copyHymnText (hymn) {
                    let text = hymn.book_title + ' :: ' + hymn.category + '\n'
                    text += getHymnNumberAndTitle(hymn) + '\n\n\n'

                    for (let verse of hymn.verses) {
                        text += getVerseLyricsText(verse) + '\n\n'
                    }

                    copyText(text.trim())
                    showToastMessage('–£—Å–ø–µ—à–Ω–æ', '–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω')
                }

                updateBooks()

                selectBook({
                    book_id: 'song-of-rebirth-ehvda',
                    title: '–ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –ï–•–≤–î–ê',
                    total_songs: 3415,
                })

                return {
                    currentPage,
                    maxPage,
                    noSleepCheck,
                    searchString,
                    resetSearchForm,
                    showSearchResults,
                    searchResults,
                    searchResultsLabel,
                    selectedBook,
                    selectBook,
                    hymns,
                    hymnCollectionLabel,
                    books,
                    typeToSearchInput,
                    searchHymns,
                    openedHymn,
                    getHymnNumberAndTitle,
                    openHymn,
                    getVerseLyricsHtml,
                    getVerseLyricsText,
                    openedHymnLyricsFontSize,
                    changeOpenedHymnLyricsFontSize,
                    copyHymnText,
                }
            },
        }).mount('#app')
    </script>
{% endblock %}
